import java.lang.reflect.Array;
import java.util.Arrays;


public class Practice {
	public static void main(String args[]) { 
		Check c = new Check();
		int arr[] = {1, 4, 0, 0, 3, 10, 5};
		int result[] = c.subArrayMeetsSumEfficient(arr, 7);
		System.out.println(Arrays.toString(result));
		
	}
}

class Check { 
	char X = 'X';
	char O = 'O';
	
	char[][] constructMatrix(int m, int n) {
		if(m<=0 || n<=0)
			return new char[0][0];
		
		int minRow = 0, maxRow = m-1;
		int minCol = 0, maxCol = n-1;
		char mat[][] = new char[m][n];
		
		char currChar = X;
		int currRow = 0, currCol = 0;
		int loopCount = 0;
		while(minRow <= maxRow && minCol <= maxCol) {
			
			if(loopCount % 2 == 0)
				currChar = X;
			else
				currChar = O;
			while(currCol<=maxCol) {
				mat[currRow][currCol++] = currChar;
			}
			currCol--;
			currRow++;
			minRow++;
			
			while(currRow<=maxRow) {
				mat[currRow++][currCol] = currChar;
			}
			currRow--;
			currCol--;
			maxCol--;
			
			while(currCol>=minCol) {
				mat[currRow][currCol--] = currChar;
			}
			currCol++;
			currRow--;
			maxRow--;
			
			while(currRow>=minRow) {
				mat[currRow--][currCol] = currChar;
			}
			currRow++;
			currCol++;
			minCol++;
			
			
		}
		return mat;
	}
	
	int[] subArrayMeetsSumEfficient(int a[], int sum) {
		
		int temp = -1;
		
		if(a == null || a.length == 0) 
			return new int[0];
		
		if(a[0] == sum)
			return giveNewArrayFrom(a, 0, 0);
		
		int arr[] = Arrays.copyOf(a, a.length);
		for(int i=1; i<a.length; i++) {
			a[i] = a[i]+a[i-1];
			if(a[i] >= sum) {
				temp = i;
				break;
			}
		}
		
		if(temp != -1) {
			if(a[temp] == sum) 
				return giveNewArrayFrom(arr, 0, temp);
			else { 
				for(int i=0;i<temp; i++) {
					if(a[temp] - a[i] == sum) 
						return giveNewArrayFrom(arr, i+1, temp);
				}
				
				return new int[0];
			}
		} else 
			return new int[0];
	}
	int[] subArrayMeetsSumSimple(int a[], int sum) {
		int in1 = -1, in2 = -1;
		boolean found = false;
		for(int i=0; i<a.length; i++) {
			if(!found) {
				in1 = i;
				if(a[in1] == sum) {
					found = true;
					break;
				}
				int tempSum = a[in1];
				for(int j=i+1; j<a.length; j++) {
					in2 = j;
					tempSum = tempSum + a[j];
					if(tempSum == sum) {
						found = true;
						break;
					}
				}
				if(!found) {
					in1 = -1;
					in2 = -1;
				}
			}
		}
		
		if(!found)
			return new int[0];
		else 
			return giveNewArrayFrom(a, in1, in2);
	}
	
	private int[] giveNewArrayFrom(int a[], int i1, int i2) {
		int result[] = new int[i2-i1+1];
		for(int i=i1; i<=i2; i++) {
			result[i-i1] = a[i];
		}
		
		return result;
	}

}
