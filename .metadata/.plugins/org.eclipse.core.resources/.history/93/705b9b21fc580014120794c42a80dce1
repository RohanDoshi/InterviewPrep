package pack;

import java.util.Arrays;

public class Matrix {

	public static void main(String[] args) {
		int a[][] ={{10, 20, 30, 40}, {15, 25, 35, 45}, {24, 29, 37, 48}, {32, 33, 39, 50}};
		Mat mat = new Mat();
		//mat.kSmallestElementEfficient(a, 7);
		int arr[][] = { {1, 1, 1, 1, 1},
	            {2, 2, 2, 2, 2},
	            {3, 3, 3, 3, 3},
	            {4, 4, 4, 4, 4},
	            {5, 5, 5, 5, 5},
	         };
		//mat.printSpiral(a);
		//mat.printSumOfKByKArrays(arr, 3);
		int temp[][] = mat.transpose(arr);
		for(int i=0; i<temp.length; i++) {
			System.out.println(Arrays.toString(temp[i]));
		}
		
	}

}

class KthSmallestSortedMatrix { 
	
	private HeapNode head;
	
	public void add(int val, int row, int col) {
		HeapNode node = new HeapNode(val, row, col);
		addToQueue(node);
	}
	
	public HeapNode poll() {
		if(head != null) {
			HeapNode node = head;
			head = head.next;
			return node;
		}
		return null;
	}
	
	public void print(HeapNode node) {
		HeapNode temp = node;
		while(temp != null) {
			System.out.print(temp.val+" ");
			temp = temp.next;
		}
	}
	
	private void addToQueue(HeapNode node) {
		if(head == null) {
			head = node;
		} else { 
			if(node.val < head.val) {
				node.next = head;
				head = node;
			} else { 
				HeapNode temp = head.next;
				HeapNode prev = head;
				while(temp != null) {
					if(node.val <= temp.val) {
						node.next = temp;
						prev.next = node;
						break;
					} else {
						temp = temp.next;
						prev = prev.next;
					}
				}
			}	
		}
		
		print(head);
	}
	
	
	
	private class HeapNode { 
		int val;
		int row; 
		int col;
		HeapNode next;
		
		public HeapNode(int val, int row, int col) {
			this.val = val;
			this.row = row;
			this.col = col;
		}
	}
	public void kthSmallest(int ar[][] , int k ) {
		for(int i=0; i<ar[0].length; i++) {
			add(ar[0][i], 0, i);
		}
	}
}

class Mat {
	
	public int[][] transpose(int a[][] ) {
		int rows = a.length;
		int cols = a[0].length;
		int[][] trans = new int[cols][rows];
		for(int i=0; i<rows; i++) {
			for(int j=0; j<cols; j++) {
				trans[j][i] = a[i][j];
			}
		}
		return trans;
	}
	
	public void printSumOfKByKArrays(int[][] a, int k) {
		int[][] res = new int[k][k];
		for(int i=0; i<k; i++) {
			for(int j=0; j<k; j++) {
				printSumKK(a, i, j, k);
			}
			System.out.println();
		}
	}
	
	public void printSumKK(int[][] a, int rowFrom, int colFrom, int k) {
		int sum = 0;
		for(int i=rowFrom; i < rowFrom + k; i++) {
			for(int j=colFrom; j< colFrom + k; j++ ) {
				sum += a[i][j];
			}
		}
		System.out.print(sum+" ");
 	}
	
	
	HeapNode a[] = null;
	int heapSize = -1;
	
	public void matrixMultiply(int a[][], int b[][], int res[][], int n) { 
		matrixMultiply(a, b, res, 0, a[0].length-1, 0, b[0].length-1, n);
	}
	
	// in correct 
	private void matrixMultiply(int a[][], int b[][] , int res[][], int r1, int c1, int r2, int c2, int n) {
		if(n == 1) {
			res[n-1][n-1] = a[r1][c1] * b[r2][c2];
		}
		
		if(n == 2) {
			 matrixMultiply(a, b, res, r1, c1/2, r2, c2/2, n/2) ;
			matrixMultiply(a, b, res,  r1, c1, r1+1, c2/2, n/2);
		}
		
		else {
			 matrixMultiply(a, b, res, r1/2, c1/2, r2/2, c2/2, n/2);
		}
	}
	public void printSpiral(int[][] a ) { 
		print(a, 0, a[0].length, a.length, a[0].length);
	}
	
	private void print(int[][] a, int row1, int col1, int numRow, int numCol) {
		if(numRow == 0 || numCol ==0) {
			return;
		}
		
		int r = row1, c = col1;
		int i = 0;
		while( i < numCol) {
			System.out.print(a[r][--c]+" ");
			i++;
		}
		
		numRow--;
		i = 0;
		while(i < numRow) {
			System.out.print(a[++r][c]+" ");
			i++;
		}
		
		numCol --;
		i = 0;
		while(i < numCol) {
			System.out.print(a[r][++c]+" ");
			i++;
		}
		
		numRow--;
		i = 0;
		while(i < numRow) {
			System.out.print(a[--r][c]+" ");
			i++;
		}
		i = 0;
		
		
		numCol--;
		
		print(a, r, c, numRow, numCol);
		
		
	}
	
	private class HeapNode {
		int row; 
		int col; 
		int val; 
		
		public HeapNode(int val, int row, int col) {
			this.val = val;
			this.row = row;
			this.col = col;
		}
		
	}
	
	private void swap(int i, int j) {
		HeapNode temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
	
	public void buildMinHeap(HeapNode a[]) { 
		this.a = a; 
		this.heapSize = a.length;
		for(int i=a.length/2; i>=0; i--) {
			minHeapify(i);
		}
	}
	
	public void minHeapify(int i) {
		int leftIndex = leftChild(i);
		int rightIndex = rightChild(i);
		int smallestIndex = i;
		if(leftIndex < heapSize && a[leftIndex].val < a[smallestIndex].val) {
			smallestIndex = leftIndex;
		}
		
		if(rightIndex < heapSize && a[rightIndex].val < a[smallestIndex].val) {
			smallestIndex = rightIndex;
		}
		
		if(smallestIndex != i) {
			swap(smallestIndex, i);
			minHeapify(smallestIndex);
		}
	}
	
	public void kSmallestElementEfficient(int a[][], int k) { 
		// build min heap from first row
		HeapNode nodes[] = new HeapNode[a[0].length];
		for(int i=0; i<a[0].length; i++) {
			nodes[i] = new HeapNode(a[0][i], 0, i);
		}
		for(int i=1; i<=k; i++) {
			buildMinHeap(nodes);
			// first element is min element
			HeapNode min = nodes[0];
			System.out.println("i="+i+" min="+nodes[0].val);
			if(i == k)
				return;
			// take next element in min's col 
			if(min.row + 1 >= a.length) 
				min.val = Integer.MAX_VALUE;
			else {
				min.row = min.row + 1;
				min.col = min.col;
				min.val = a[min.row][min.col];
			}
		}
		System.out.println(nodes[0].val);
		
	}
	
	int leftChild(int index) {
		return 2*index + 1; 
	}
	
	int rightChild(int index) {
		return 2*index + 2;
	}
	
	int parent(int index) {
		return index/2;
	}
	
	
	public void kSmallestElement(int a[][], int k) {
		int arr[] = constructArray(a);
		Heap heap = new Heap(arr);
		heap.sort();
		System.out.println(heap.getValue(arr.length - k));
	}
	
	public int[] constructArray(int a[][]) {
		int temp[] = new int[a.length * a[0].length];
		int count = 0;
		for(int i=0; i<a.length; i++) {
			for(int j=0; j<a[0].length; j++) {
				temp[count++] = a[i][j];
			}
		}
		
		return temp;
	}
}

class Heap {
	
	int a[] = null;
	int heapSize = 0;
	
	int leftChild(int index) {
		return 2*index + 1; 
	}
	
	int rightChild(int index) {
		return 2*index + 2;
	}
	
	int parent(int index) {
		return index/2;
	}
	
	int getValue(int index) {
		if(index >= a.length) {
			throw new ArrayIndexOutOfBoundsException();
		}
		
		return a[index];
	}
	
	public Heap(int[] a) {
		this.heapSize = a.length;
		this.a = a;
	}
	
	public void sort() {
		buildMinHeap();
		for(int i = a.length-1; i >0; i--) {
			swap(0, i);
			this.heapSize--;
			heapify(0);
		}
		System.out.println(Arrays.toString(a));
	}
	
	private void buildMinHeap() {
		for(int i=a.length/2; i>=0; i--) {
			heapify(i);
		}
	}
	
	private void heapify(int index) {
		int leftIndex = leftChild(index);
		int rightIndex = rightChild(index);
		int smallestIndex = index;
		
		if(leftIndex < heapSize && a[leftIndex] < a[smallestIndex]) {
			smallestIndex = leftIndex;
		}
		
		if(rightIndex < heapSize && a[rightIndex] < a[smallestIndex]) {
			smallestIndex = rightIndex;
		}
		
		if(smallestIndex != index) {
			swap(index, smallestIndex);
			heapify(smallestIndex);
		}
	}
	
	private void swap(int i, int j) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
	
	
}