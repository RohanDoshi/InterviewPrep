package pack;

import java.util.Date;

public class DynamicDP {

	public static void main(String args[]) {
		LCSubsequence subsequence = new LCSubsequence();
		String s1 = "ABCDGH" ;
		String s2 = "AEDFHR";
		System.out.println(subsequence.lcs(s1, s2));
		
		long d1 = new Date().getTime();
		System.out.println(subsequence.lcs("AGGTABDDDKWLKDDKKKD", "GXTXAYBKKSSHJKI"));
		long d2 =  new Date().getTime();
		System.out.println(d2 - d1);
		
		 d1 = new Date().getTime();
		System.out.println(subsequence.lcsDP("AGGTABDDDKWLKDDKKKD", "GXTXAYBKKSSHJKI"));
		 d2 =  new Date().getTime();
		System.out.println(d2 - d1);
		
		LCString lcString = new LCString();
		System.out.println(lcString.longestCommonSubstr("OldSite:GeeksforGeeks.org", "NewSite:GeeksQuiz.com"));
	}
}

class LCSubsequence {
	
	public String lcs(String s1, String s2) {
		
		int l1 = s1.length();
		int l2 = s2.length();
		
		if(l1 <= 0 || l2 <= 0) 
			return "";
		
		String r1 = "", r2 = "", r3 = "" ;
		if(s1.charAt(0) == s2.charAt(0)) {
			r1 = s1.substring(0, 1) + lcs(s1.substring(1, l1), s2.substring(1, l2));
		} else { 
			r2 = lcs(s1, s2.substring(1, l2));
			r3 = lcs(s1.substring(1, l1), s2);
		}
		
		String max = "";
		
		if(r1.length() > r2.length()) {
			if(r1.length() > r3.length()) {
				max = r1;
			} else {
				max = r3;
			}
		} else if(r2.length() > r3.length()) {
			max = r2;
		} else {
			max = r3;
		}
		
		return max;
	}
	
	public String lcsDP(String s1, String s2) {
		String matrix[][] = new String[s1.length() + 1][s2.length() + 1];
		return lcsDPChar(matrix, s1.toCharArray(), 0, s2.toCharArray(), 0);
	}
	
	private String lcsDPChar(String[][] matrix , char[] c1, int a, char[] c2, int b) {
		
		if(a >= c1.length || b >= c2.length)
			return "";
		
		String r1 = "", r2 = "", r3 = "" ;
		if(c1[a] == c2[b]) {
			r1 = new Character(c1[a]) + lcsDPChar(matrix, c1, a+1, c2, b+1);
		} else {
			
			if(matrix[a][b+1] != null)
				r2 = matrix[a][b+1];
			else
				r2 = lcsDPChar(matrix, c1, a, c2, b+1);
			
			if(matrix[a+1][b] != null) 
				r3 = matrix[a+1][b];
			else
				r3 = lcsDPChar(matrix, c1, a+1, c2, b);
		}
		
		String max = "";
		
		if(r1.length() > r2.length()) {
			if(r1.length() > r3.length()) {
				max = r1;
			} else {
				max = r3;
			}
		} else if(r2.length() > r3.length()) {
			max = r2;
		} else {
			max = r3;
		}
		
		matrix[a][b] = max;
		return max;
	}
}

class LCString {
	
	String s1 = "ABCDGH" ;
	String s2 = "AEDFHR";
	
	public String longestCommonSubstr(String s1, String s2) {
		
		int l1 = s1.length();
		int l2 = s2.length();
		
		if(l1 <= 0 || l2 <= 0) 
			return "";
		
		String r1 = "", r2 = "", r3 = "" ;
		if(s1.charAt(0) == s2.charAt(0)) {
			r1 = s1.substring(0, 1) + longestCommonSubstrContinuous(s1.substring(1, l1), s2.substring(1, l2));
		} else { 
			r2 = longestCommonSubstr(s1, s2.substring(1, l2));
			r3 = longestCommonSubstr(s1.substring(1, l1), s2);
		}
		
		String max = "";
		
		if(r1.length() > r2.length()) {
			if(r1.length() > r3.length()) {
				max = r1;
			} else {
				max = r3;
			}
		} else if(r2.length() > r3.length()) {
			max = r2;
		} else {
			max = r3;
		}
		
		return max;
	}
	
	private String longestCommonSubstrContinuous(String s1, String s2) {
		if(s1.length() == 0 || s2.length() == 0) 
			return "";
		
		if(s1.charAt(0) == s2.charAt(0)) {
			return s1.substring(0, 1) + longestCommonSubstrContinuous(s1.substring(1), s2.substring(1));
		} else 
			return "";
	}
	
}
