package com.aol.sportal.beans;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.GregorianCalendar;import java.util.Iterator;import java.util.List;import java.util.Properties;import java.util.ResourceBundle;import javax.servlet.http.HttpServletRequest;import javax.xml.datatype.XMLGregorianCalendar;import jxl.common.Logger;import com.aol.obi.schema.ArrayOfSwitchOfferItem;import com.aol.obi.schema.SubSwitch;import com.aol.obi.schema.SwitchOfferItem;import com.aol.sportal.app.AppSession;import com.aol.sportal.app.SPortalSession;public class PremiumProductDetailJsonBean extends PremiumProductJsonBean {		private static ResourceBundle	                resourceBundle	       = null;	// SPortalSession.getResources(request);	                                                                                	private String	                                actionText	           = "";			private String	                                actionUrl	           = "";			private String	                                activatedBySn	       = "";			private boolean	                                billingInAdvance	   = false;			private ArrayList<PremiumProductDetailJsonBean>	bundleSubsList	       = null;			private String	                                bundleType	           = "";			private Calendar	                            cancelDate	           = null;	private String	                                externalSubscriptionId	= "";			private boolean	                                hasActionText	       = false;		// private boolean hasBundle;		// private boolean hasGathr;			private boolean	                                hasOneTime;	private boolean	                                hasPendingPackageSwitch;			private boolean	 hasShareableFlag	             = false;		private String	 helpLink	                     = "";		private boolean	 isLendeeBundle	                 = false;		private String	 longDesc	                     = "";			private String	 managePremiumServicesPageImage1	= "";			private String	 managePremiumServicesPageImage2	= "";	private Calendar	nextBillDate	             = null;			private String	 notes	                         = "";			private String	 offerId	                     = null;			private String	 orderId	                     = "";			private String	                                packageSwitchDate	            = null;			private String	                                pendingPackageSwitch	        = "";		private String	 productDisplayType	             = "";	private String	 productDisplayType2	         = "";			private String	 reeKey;		private String	 sharedBy	                     = "";	private String	 sharedDate	                     = "";			private String	 sharedExpDate	                 = "";			private String	 sharedTo	                     = "";			private Calendar	subscriptionDate	         = null;			private String	 svuDataValue	                 = "";			private String	 topKey;			private Calendar	                            trialEndDate	                = null;			private Calendar	                            trialStartDate	                = null;		private boolean	 v2EnabledBundle	             = false;		private static final Logger logger = Logger.getLogger(PremiumProductDetailJsonBean.class);	// private String dataMaskMobileCode="";	public PremiumProductDetailJsonBean(HttpServletRequest request, PremiumProductBean bean) {				super(request, bean);				logger.debug("PremiumProductBean in PremiumProductDetailJsonBean=" + bean);						// this.dataMaskMobileCode=bean.getDataMaskMobileCode();		this.subscriptionDate = bean.getSubscriptionDate();		this.cancelDate = bean.getCancelDate();		this.v2EnabledBundle = bean.isV2EnabledBundle();				this.hasOneTime = bean.isHasOneTime();				// this.hasBundle = bean.isHasBundle();				this.nextBillDate = bean.getNextBillDate();				this.billingInAdvance = bean.isBillingInAdvance();				this.reeKey = bean.getReeKey();				this.topKey = bean.getTopKey();				this.activatedBySn = bean.getActivatedBySn();				this.svuDataValue = bean.getSvuDataValue();				this.orderId = bean.getOrderId();				this.offerId = bean.getOfferId();				// this.hasGathr=bean.isHasGathr();				this.externalSubscriptionId = bean.getExternalSubscriptionId();				this.productDisplayType = bean.getProductDisplayType();				this.productDisplayType2 = bean.getProductDisplayType2();				this.bundleType = bean.getBundleType();				this.hasShareableFlag = bean.isHasShareable();				this.sharedBy = bean.getSharedBy();				this.sharedTo = bean.getSharedTo();				this.sharedDate = bean.getSharedDate();				this.sharedExpDate = bean.getSharedExpDate();				this.trialStartDate = bean.getTrialStartDate();				this.trialEndDate = bean.getTrialEndDate();				this.isLendeeBundle = bean.isLendeeBundle();				this.bundleSubsList = new ArrayList<PremiumProductDetailJsonBean>();				// Add logic here to populate from the Ecomm platform - if IsGathr		// product/bundle...				logger.debug("******************hasBundle=" + hasBundle + " hasGathr=" + hasGathr);				if (this.hasGathr)				{						PremiumGathrProductBean premiumGathrProductBean = null;						if (this.hasBundle)									{				premiumGathrProductBean = AppSession.getEcommPropertyForBundle(bean.getOfferId(), request, true);								logger.debug("After Calling EComm for BUNDLE OBIproductID=" + bean.getObiProductId() + "ProductName=" + premiumGathrProductBean.getGathr_product_name());								// premiumGathrProductBean=				// AppSession.getEcommPropertyForBundle("1003905");				List<SubSwitch> pendingSwicthPackageList = bean.getPendingSwicthPackageList();				if (pendingSwicthPackageList != null && pendingSwicthPackageList.size() > 0)				{															for (SubSwitch subSwitch : pendingSwicthPackageList) {												XMLGregorianCalendar switchDate = subSwitch.getSwitchDate();						if (switchDate != null) {							SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");							GregorianCalendar gc = switchDate.toGregorianCalendar();							String switchToDate = sdf.format(gc.getTime());														if (switchToDate != null) {								this.hasPendingPackageSwitch = true;								this.packageSwitchDate = switchToDate;							}						}						ArrayOfSwitchOfferItem arrayOfSwitchOfferItem = subSwitch.getSwitchOfferItems();						if (arrayOfSwitchOfferItem != null && arrayOfSwitchOfferItem.getSwitchOfferItem() != null) {							List<SwitchOfferItem> listSwitchOfferItem = arrayOfSwitchOfferItem.getSwitchOfferItem();							if (listSwitchOfferItem != null)							{								SwitchOfferItem switchOfferItem = listSwitchOfferItem.get(0);								PremiumGathrProductBean premiumGathrProductBeanSwitch = null;								logger.debug("Subscription SWITCHING to (pending)=" + switchOfferItem.getToOfferId());								premiumGathrProductBeanSwitch = AppSession.getEcommPropertyForBundle(switchOfferItem.getToOfferId(), request, true);								if (premiumGathrProductBeanSwitch != null && premiumGathrProductBeanSwitch.getGathr_product_name() != null) {									this.pendingPackageSwitch += premiumGathrProductBeanSwitch.getGathr_product_name() + " ";									logger.debug("this.pendingPackageSwitch Str=" + this.pendingPackageSwitch);								}								else									logger.debug("this.pendingPackageSwitch Str is NULL");							}													}											}									}							}						else						{								logger.debug("Calling EComm for OBIProductID=" + bean.getObiProductId());								// premiumGathrProductBean=				// AppSession.getEcommPropertyForProduct(bean.getObiProductId()				// , "1003903");								logger.debug("Calling to get the product details..." + bean);								premiumGathrProductBean = AppSession.getEcommPropertyForBundle(bean.getObiProductId(), request, false);								logger.debug("After Calling EComm for PRODUCT OBIproductID=" + bean.getObiProductId() + "ProductName=" + premiumGathrProductBean.getGathr_product_name());							}						if (premiumGathrProductBean != null)						{								this.setProductName(premiumGathrProductBean.getGathr_product_name());								this.managePremiumServicesPageImage1 = premiumGathrProductBean.getGathr_myaccount_img_url_105();								this.managePremiumServicesPageImage2 = premiumGathrProductBean.getGathr_myaccount_img_url_95();								/*				 * this.managePremiumServicesPageImage3 =				 * premiumGathrProductBean.getGathr_myaccount_img_url_75();				 * this.managePremiumServicesPageImage4 =				 * premiumGathrProductBean.getGathr_myaccount_img_url_65();				 * this.managePremiumServicesPageImage5 =				 * premiumGathrProductBean.getGathr_myaccount_img_url_40();				 */								/*				 * //TODO --- Remove the hardcoding - just for test..				 * if(this.hasBundle) {				 * this.managePremiumServicesPageImage1="40x40-Lifelock.gif";				 * this.managePremiumServicesPageImage2="40x40-Lifelock.gif"; }				 * else {				 * this.managePremiumServicesPageImage1="37x37-Dialup.png";				 * this.managePremiumServicesPageImage2="37x37-Dialup.png"; }				 */								this.notes = premiumGathrProductBean.getGathr_myaccount_p_notes();								this.helpLink = premiumGathrProductBean.getGathr_myaccount_help_link();								logger.debug("+++++++++++++++ Bundle Values from EComm = " + this.managePremiumServicesPageImage1 + this.notes);							}					}				else {						Properties premiumResources = AppSession.getPremiumServiceResourcesInstance(request);						this.managePremiumServicesPageImage1 = premiumResources.getProperty(this.getProductId() + "Image1", "");						this.managePremiumServicesPageImage2 = premiumResources.getProperty(this.getProductId() + "Image2", "");						this.helpLink = premiumResources.getProperty(this.getProductId() + "HelpLink", "");						this.notes = premiumResources.getProperty(this.getProductId() + "Desc", "");						this.longDesc = premiumResources.getProperty(this.getProductId() + "LongDesc", "");						this.loadFromResourceBundle(request);					}				this.loadBundleSubsList(request, bean);			}			public String getActionText() {				return actionText;			}		public String getActionUrl() {				return actionUrl;			}		public String getActivatedBySn() {				return activatedBySn;			}		public ArrayList<PremiumProductDetailJsonBean> getBundleSubsList() {				return bundleSubsList;			}		public String getBundleType() {				return bundleType;			}		public Calendar getCancelDate() {		return cancelDate;	}	public String getExternalSubscriptionId() {				return externalSubscriptionId;			}		public String getHelpLink() {				return helpLink;			}	public String getLongDesc() {		return longDesc;	}		public String getManagePremiumServicesPageImage1() {				return managePremiumServicesPageImage1;			}		public String getManagePremiumServicesPageImage2() {				return managePremiumServicesPageImage2;			}	public Calendar getNextBillDate() {				return nextBillDate;			}		public String getNotes() {				return notes;			}	public String getOfferId() {				return offerId;			}		public String getOrderId() {				return orderId;			}		public String getPackageSwitchDate() {		return packageSwitchDate;	}		public String getPendingPackageSwitch() {		return pendingPackageSwitch;	}		public String getProductDisplayType() {				return productDisplayType;			}		public String getProductDisplayType2() {				return productDisplayType2;			}		public String getReeKey() {				return reeKey;			}	public String getSharedBy() {				return sharedBy;			}		public String getSharedDate() {				return sharedDate;			}		public String getSharedExpDate() {				return sharedExpDate;			}		public String getSharedTo() {				return sharedTo;			}		public Calendar getSubscriptionDate() {				return subscriptionDate;			}		public String getSvuDataValue() {				return svuDataValue;			}		public String getTopKey() {				return topKey;			}		public Calendar getTrialEndDate() {				return trialEndDate;			}		public Calendar getTrialStartDate() {				return trialStartDate;			}		public boolean isBillingInAdvance() {		/*		 * if ((this.hasGathr) && (this.bundleSubsList !=null) &&		 * (this.bundleSubsList.size() > 0)) { for (PremiumProductDetailJsonBean		 * detailBean : this.bundleSubsList) { if		 * (detailBean.isBillingInAdvance()) { billingInAdvance = true; break; }		 * } }		 */				return billingInAdvance;	}		public boolean isHasActionText() {				return hasActionText;			}			/*	 * public boolean isHasBundle() { return hasBundle; } public boolean	 * isHasGathr() { return hasGathr; }	 */	public boolean isHasOneTime() {				return hasOneTime;			}		public boolean isHasPendingPackageSwitch() {		return hasPendingPackageSwitch;	}		public boolean isHasShareableFlag() {				return hasShareableFlag;			}		public boolean isLendeeBundle() {		return isLendeeBundle;	}			public boolean isV2EnabledBundle() {		return v2EnabledBundle;	}			private void loadBundleSubsList(HttpServletRequest request,PremiumProductBean bean) {				if (bean.isHasBundle() == false)						return;				ArrayList<PremiumProductBean> bundleList = bean.getBundleSubsList();				if (bundleList == null || bundleList.size() < 1)						return;				Iterator<PremiumProductBean> it = bundleList.iterator();				PremiumProductBean item;				while (it.hasNext()) {						item = (PremiumProductBean) it.next();						this.bundleSubsList.add(new PremiumProductDetailJsonBean(request, item));					}			}			private void loadFromResourceBundle(HttpServletRequest request) {				if (PremiumProductDetailJsonBean.resourceBundle == null)						PremiumProductDetailJsonBean.resourceBundle = SPortalSession.getResources(request);				String currProductId = this.getProductId();				if (currProductId.equalsIgnoreCase("60353") == true ||		        		        currProductId.equalsIgnoreCase("60414") == true ||		        		        currProductId.equalsIgnoreCase("60415") == true ||		        		        currProductId.equalsIgnoreCase("60408") == true ||		        		        currProductId.equalsIgnoreCase("60407") == true ||		        		        currProductId.equalsIgnoreCase("60400") == true ||		        		        currProductId.equalsIgnoreCase("60403") == true ||		        		        currProductId.equalsIgnoreCase("60404") == true ||		        		        currProductId.equalsIgnoreCase("60407") == true ||		        		        currProductId.equalsIgnoreCase("60410") == true ||		        		        currProductId.equalsIgnoreCase("60409") == true ||		        		        currProductId.equalsIgnoreCase("60401") == true ||		        		        currProductId.equalsIgnoreCase("60405") == true ||		        		        currProductId.equalsIgnoreCase("60449") == true ||		        		        currProductId.equalsIgnoreCase("60450") == true ||		        		        currProductId.equalsIgnoreCase("60451") == true ||		        		        currProductId.equalsIgnoreCase("60411") == true) {						// 60353 - life lock; 60414 - McAfee; 60415 - McAfee;						// 60408 - $250 Extended Computer Protection; 60407 - $750 Extended			// Computer Protection Plan*						// 60400 - $1250 Extended Computer Protection Plan*; 60401 - Sprint			// Discount;						// 60403 - Norton; 60404-Hyatt Legal. 60407 - $750 Extended Computer			// Protection from AOL						// 60451- AOL Client; 60450- Chartis; AIM-60449; 60411-Back Up			// Dial-up Access (5hrs/mo)						// 60405 - Unlimited Dial-up Access; 60409-Back Up Dial-up Access			// (50 hrs/mo)						// 60410 - Back Up Dial-up Access (10 hrs/mo)						if (this.getStatus().equalsIgnoreCase("active")) {								this.actionText = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "ActiveActionText");								this.actionUrl = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "ActiveActionUrl");								this.hasActionText = true;							} else {								// Eligible								this.actionText = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "EligibleActionText");								this.actionUrl = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "EligibleActionUrl");								this.hasActionText = true;							}					} else if (currProductId.equalsIgnoreCase("60411") == true ||		        		        currProductId.equalsIgnoreCase("60406") == true ||		        		        currProductId.equalsIgnoreCase("60413") == true ||		        		        currProductId.equalsIgnoreCase("60405") == true ||		        		        currProductId.equalsIgnoreCase("60412") == true ||		        		        currProductId.equalsIgnoreCase("60409") == true ||		        		        currProductId.equalsIgnoreCase("60402") == true ||		        		        currProductId.equalsIgnoreCase("60423") == true ||		        		        currProductId.equalsIgnoreCase("60424") == true ||		        		        currProductId.equalsIgnoreCase("60317") == true ||		        		        currProductId.equalsIgnoreCase("60409") == true ||		        		        currProductId.equalsIgnoreCase("60500") == true ||		        		        currProductId.equalsIgnoreCase("60552") == true ||		        		        currProductId.equalsIgnoreCase("60553") == true ||		        		        currProductId.equalsIgnoreCase("60496") == true ||		        		        currProductId.equalsIgnoreCase("60410") == true) {						// 60411 - Back Up Dial-up Access (5hrs/mo); 60406 - 24X7 Live			// Technical Support						// 60413 - AOL Mail; 60405 - Unlimited Dial-up Access; 60412 -			// Limited Live Technical Support						// 60409 - Back Up Dial-up Access (50 hrs/mo); 60410 - Back Up			// Dial-up Access (10 hrs/mo)						// 60402, 60423, 60424 - VIP Loyalty Program						if (this.getStatus().equalsIgnoreCase("active")) {								this.actionText = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "ActiveActionText");								this.actionUrl = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "ActiveActionUrl");								this.hasActionText = true;							} else {				this.actionText = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "EligibleActionText");				// Eligible							}					} else if (currProductId.equalsIgnoreCase("60661") == true || (currProductId.equalsIgnoreCase("60736") == true ) || (currProductId.equalsIgnoreCase("60734") == true ) || (currProductId.equalsIgnoreCase("60737") == true )) {						if (this.getStatus().equalsIgnoreCase("eligible"))						{								// Eligible								this.actionText = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "EligibleActionText");								this.actionUrl = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "EligibleActionUrl");								this.hasActionText = true;							}					} else if ((currProductId.equalsIgnoreCase("60660") == true) || (currProductId.equalsIgnoreCase("60659") == true) ||		        		        (currProductId.equalsIgnoreCase("60658") == true) || (currProductId.equalsIgnoreCase("60657") == true)) {						// always On						this.actionText = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "ActiveActionText");						this.actionUrl = PremiumProductDetailJsonBean.resourceBundle.getString(currProductId + "ActiveActionUrl");						this.hasActionText = true;					}			}	public void setActionText(String actionText) {				this.actionText = actionText;			}		public void setActionUrl(String actionUrl) {				this.actionUrl = actionUrl;			}		public void setActivatedBySn(String activatedBySn) {				this.activatedBySn = activatedBySn;			}		public void setBillingInAdvance(boolean billingInAdvance) {		this.billingInAdvance = billingInAdvance;	}			/*	 * public String getDataMaskMobileCode() { return dataMaskMobileCode; }	 * 	 * public void setDataMaskMobileCode(String dataMaskMobileCode) {	 * this.dataMaskMobileCode = dataMaskMobileCode; }	 */	public void setBundleSubsList(	        	        ArrayList<PremiumProductDetailJsonBean> bundleSubsList) {				this.bundleSubsList = bundleSubsList;			}			public void setBundleType(String bundleType) {				this.bundleType = bundleType;			}		public void setCancelDate(Calendar cancelDate) {		this.cancelDate = cancelDate;	}		public void setExternalSubscriptionId(String externalSubscriptionId) {				this.externalSubscriptionId = externalSubscriptionId;			}		public void setHasActionText(boolean hasActionText) {				this.hasActionText = hasActionText;			}		/*	 * public void setHasBundle(boolean hasBundle) { this.hasBundle = hasBundle;	 * } public void setHasGathr(boolean hasGathr) { this.hasGathr = hasGathr; }	 */	public void setHasOneTime(boolean hasOneTime) {				this.hasOneTime = hasOneTime;			}		public void setHasPendingPackageSwitch(boolean hasPendingPackageSwitch) {		this.hasPendingPackageSwitch = hasPendingPackageSwitch;	}		public void setHasShareableFlag(boolean hasShareableFlag) {				this.hasShareableFlag = hasShareableFlag;			}		public void setHelpLink(String helpLink) {				this.helpLink = helpLink;			}			public void setLendeeBundle(boolean isLendeeBundle) {		this.isLendeeBundle = isLendeeBundle;	}			public void setLongDesc(String longDesc) {		this.longDesc = longDesc;	}		public void setManagePremiumServicesPageImage1(	        	        String managePremiumServicesPageImage1) {				this.managePremiumServicesPageImage1 = managePremiumServicesPageImage1;			}	public void setManagePremiumServicesPageImage2(	        	        String managePremiumServicesPageImage2) {				this.managePremiumServicesPageImage2 = managePremiumServicesPageImage2;			}		public void setNextBillDate(Calendar nextBillDate) {				this.nextBillDate = nextBillDate;			}		public void setNotes(String notes) {				this.notes = notes;			}		public void setOfferId(String offerId) {				this.offerId = offerId;			}		public void setOrderId(String orderId) {				this.orderId = orderId;			}		public void setPackageSwitchDate(String packageSwitchDate) {		this.packageSwitchDate = packageSwitchDate;	}		public void setPendingPackageSwitch(String pendingPackageSwitch) {		this.pendingPackageSwitch = pendingPackageSwitch;	}	public void setProductDisplayType(String productDisplayType) {				this.productDisplayType = productDisplayType;			}		public void setProductDisplayType2(String productDisplayType2) {				this.productDisplayType2 = productDisplayType2;			}		public void setReeKey(String reeKey) {				this.reeKey = reeKey;			}		public void setSharedBy(String sharedBy) {				this.sharedBy = sharedBy;			}		public void setSharedDate(String sharedDate) {				this.sharedDate = sharedDate;			}		public void setSharedExpDate(String sharedExpDate) {				this.sharedExpDate = sharedExpDate;			}		public void setSharedTo(String sharedTo) {				this.sharedTo = sharedTo;			}		public void setSubscriptionDate(Calendar subscriptionDate) {				this.subscriptionDate = subscriptionDate;			}		public void setSvuDataValue(String svuDataValue) {				this.svuDataValue = svuDataValue;			}		public void setTopKey(String topKey) {				this.topKey = topKey;			}			public void setTrialEndDate(Calendar trialEndDate) {				this.trialEndDate = trialEndDate;			}		public void setTrialStartDate(Calendar trialStartDate) {				this.trialStartDate = trialStartDate;			}		public void setV2EnabledBundle(boolean v2EnabledBundle) {		this.v2EnabledBundle = v2EnabledBundle;	}}