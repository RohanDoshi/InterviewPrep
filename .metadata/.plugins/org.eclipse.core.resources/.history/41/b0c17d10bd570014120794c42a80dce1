package pack;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class GraphDS {

	public static void main(String[] args) {
		char[] vert = {'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
		Graph graph = new Graph(false);
		for(int i=0; i<vert.length; i++) {
			graph.addVertex(vert[i]);
		}
		
		graph.addEdge('r', 's');
		graph.addEdge('s', 'w');
		graph.addEdge('r', 'v');
		graph.addEdge('w', 't');
		graph.addEdge('w', 'x');
		graph.addEdge('x', 'u');
		graph.addEdge('x', 'y');
		graph.addEdge('t', 'u');
		graph.addEdge('t', 'x');
		graph.addEdge('u', 'y');
		
		//graph.breadthFirstSearch('r');
		System.out.println("-----------------");
		//graph.breadthFirstSearch('s');
		
		char[] setVert = {'u', 'v', 'w', 'x', 'y', 'z' };
		Graph directedGraph = new Graph(true);
		for(int i=0; i<setVert.length; i++) {
			directedGraph.addVertex(setVert[i]);
		}
		
		directedGraph.addEdge('u', 'v');
		directedGraph.addEdge('u', 'x');
		directedGraph.addEdge('x', 'v');
		directedGraph.addEdge('v', 'y');
		directedGraph.addEdge('y', 'x');
		directedGraph.addEdge('w', 'y');
		directedGraph.addEdge('w', 'z');
		directedGraph.addEdge('z', 'z');
		
		directedGraph.depthFirstSearch();
		
		Graph cycleGraph = new Graph(true);
		char cycleVert[] = {'a', 'b','c','d','e'};
		for(char v: cycleVert) {
			cycleGraph.addVertex(v);
		}
		
		cycleGraph.addEdge('a', 'd');
		cycleGraph.addEdge('b', 'a');
		cycleGraph.addEdge('b', 'c'); 
		cycleGraph.addEdge('d', 'b');
		cycleGraph.addEdge('d', 'e');
		cycleGraph.addEdge('e', 'c');
		System.out.println("---------------------------------------");
		System.out.println(cycleGraph.hasCycle());
	}

}

class Graph {
	
	private List<Vertex> vertices = null;
	private Map<Character, Vertex> map = null;
	private boolean isDirected = false;
	private int TIME = 0;
	private enum Color {
		White,
		Gray,
		Black;
	}
	private class Vertex implements Comparable<Vertex> {
		char c;
		int distFromRoot = Integer.MAX_VALUE;
		Color color = Color.White;
		Vertex pred = null;
		int sTime = 0;
		int eTime = 0;
		List<Vertex> edgeTo = null;
		public Vertex(char c) {
			this.c = c;
			this.edgeTo = new LinkedList<Vertex>();
		}
		@Override
		public int compareTo(Vertex o) {
			if(this.eTime > o.eTime)
				return -1;
			else
				return 1;
		}
		
		
	}
	
	public Graph(boolean isDirected) {
		vertices = new LinkedList<Vertex>();
		map = new HashMap<Character, Vertex>();
		this.isDirected = isDirected;
	}
	
	public void topologicalSort() {
		dfs(vertices.get(0));
		Arrays.sort(vertices.toArray());
		System.out.println(Arrays.toString(vertices.toArray()));
	}
	
	public void addVertex(char c) {
		map.put(c, new Vertex(c));
		vertices.add(map.get(c));
	}
	
	public boolean containsVertex(char c) {
		return map.containsKey(c);
	}
	
	public void addEdge(char src, char dest) {
		if(!map.containsKey(src) || !map.containsKey(dest)) {
			return;
		}
		
		map.get(src).edgeTo.add(map.get(dest));
		if(!isDirected) {
			map.get(dest).edgeTo.add(map.get(src));
		}
	}
	
	public void breadthFirstSearch(char root) {
		Vertex rootNode = map.get(root);
		rootNode.color = Color.Gray;
		rootNode.distFromRoot = 0;
		rootNode.pred = null;
		for(Vertex vert : vertices) {
			if(vert != rootNode) {
				vert.color = Color.White;
				vert.distFromRoot = 0;
				vert.pred = null;
			}
		}
		Queue<Vertex> queue = new LinkedList<Vertex>();
		queue.add(rootNode);
		while(queue.size() > 0) {
			Vertex vertex = queue.poll();
			for(Vertex v : vertex.edgeTo) {
				if(v.color.equals(Color.White)) {
					queue.add(v);
					v.color = Color.Gray;
					v.distFromRoot = vertex.distFromRoot + 1;
					v.pred = vertex;
				}
			}
			vertex.color = Color.Black;
		}
		printBFSTree(rootNode);
	}
	
	public void printBFSTree(Vertex rootNode) {
		if(rootNode == null) {
			return;
		}
		System.out.println("["+rootNode.c+", "+rootNode.distFromRoot+"]");
		for(Vertex v : rootNode.edgeTo){
			if(v.pred == rootNode) {
				printBFSTree(v);
			}
		}
	}
	
	public void depthFirstSearch() {
		
		for(Vertex v : vertices) {
			v.color = Color.White;
			v.distFromRoot = 0;
			v.pred = null;
			v.sTime = 0;
			v.eTime = 0;
		}
		TIME = 0;
		for(Vertex v: vertices) {
			if(v.color.equals(Color.White)) {
				dfs(v);
			}
		}
		
		printDFSTree();
	}
	
	private void dfs(Vertex v) {
		TIME++;
		v.sTime = TIME;
		v.color = Color.Gray;
		for(Vertex adj : v.edgeTo) {
			if(adj.color.equals(Color.White)) {
				adj.pred = v;
				dfs(adj);
			}
		}
		TIME++;
		v.eTime = TIME;
		v.color = Color.Black;
	}
	
	public void printDFSTree( ) {
		for(Vertex v: vertices) {
			v.color = Color.White;
		}
		for(Vertex v: vertices) {
			if(v.color.equals(Color.White))
				printDFS(v);
		}
		
	}
	
	private void printDFS(Vertex v) {
		v.color = Color.Gray;
		System.out.println("["+v.c+", "+v.sTime+", "+v.eTime+"]");
		for(Vertex vert : v.edgeTo) {
			if(vert.color.equals(Color.White) && vert.pred == v) {
				printDFS(vert);
			}
		}
	}
	
	public boolean hasCycle() {
		for(Vertex v: vertices) {
			v.color = Color.White;
		}
		boolean hasCyc = false;
		for(Vertex v: vertices) {
			if(v.color.equals(Color.White)) {
				hasCyc = hasCycle(v,new HashSet<Vertex>());
				if(hasCyc)
					break;
			}
		}
		return hasCyc;
	}
	
	private boolean hasCycle(Vertex v, Set<Vertex> path) {
		v.color = Color.Gray;
		path.add(v);
		boolean hasCycle = false;
		for(Vertex vert : v.edgeTo) {
			if(path.contains(vert)) {
				return true;
			}
			if(vert.color.equals(Color.White)) {
				path.add(vert);
				hasCycle = hasCycle || hasCycle(vert, path);
			}
		}
		return hasCycle;
	}
	
}
