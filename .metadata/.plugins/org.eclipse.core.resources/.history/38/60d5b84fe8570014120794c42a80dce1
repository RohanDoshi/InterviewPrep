package pack;

import java.util.Arrays;
import java.util.PriorityQueue;

public class PriorityQueueDS {

	public static void main(String[] args) {
		
	}

}

class PriorityQ<T> {
	
	private class Heap { 
		Object[] queue = null;
		int elementCount = 0;
		static final int DEF_SIZE = 10;
		static final int MAX_LEN = Integer.MAX_VALUE - 8;
		int capacityIncrement;
		
		public Heap(int size) {
			this(size, 0);
		}
		
		public Heap(int size, int capacityIncrement) {
			this.queue = new Object[size];
			this.capacityIncrement = capacityIncrement;
		}
		
		public void insert(Object o) {
			if(elementCount >= queue.length) {
				grow(elementCount + 1);
			}
			queue[elementCount++] = o;
			heapify(elementCount-1);
		}
		
		private void heapify(int index) {
			int leftIndex = 
		}
		
		private int leftIndex(int i) {
			return 2 * i + 1;
		}
		
		private int rightIndex(int i) {
			return 2*i + 2;
		}
		
		private void grow(int minCapacity) {
			int oldCapacity = queue.length;
			int newCapacity = oldCapacity + ((capacityIncrement == 0) ?  oldCapacity : capacityIncrement);
			if(newCapacity - minCapacity <0 ) {
				newCapacity = minCapacity;
			}
			if(newCapacity - MAX_LEN > 0) {
				newCapacity = hugeCapacity(newCapacity);
			}
			
			queue = Arrays.copyOf(queue, newCapacity);
		}
		
		private int hugeCapacity(int minCapacity) {
			if(minCapacity < 0) {
				throw new OutOfMemoryError();
			}
			return (minCapacity > MAX_LEN) ? Integer.MAX_VALUE : MAX_LEN;
			
		}
	}
}

