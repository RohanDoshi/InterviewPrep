package pack;

import java.util.Arrays;
import java.util.PriorityQueue;

public class PriorityQueueDS {

	public static void main(String[] args) {
		PriorityQ<Integer> queue = new PriorityQ<>();
		queue.add(new Integer(53));
		queue.add(new Integer(41));
		queue.add(new Integer(50));
		queue.add(new Integer(40));
		queue.print();
	}

}

class PriorityQ<T> {
	
	private Heap heap ;
	
	public PriorityQ() {
		heap = new Heap(10);
	}
	
	public void add(Object o) {
		heap.insert(o);
	}
	
	public void print() {
		heap.print();
	}
	
	private class Heap { 
		Object[] queue = null;
		int elementCount = 0;
		static final int MAX_LEN = Integer.MAX_VALUE - 8;
		int capacityIncrement;
		
		public Heap(int size) {
			this(size, 0);
		}
		
		public Object poll() { 
			if(elementCount == 0) {
				return null;
			}
			
			Object o = queue[0];
			if(elementCount == 1) {
				queue[0] = null;
				elementCount--;
			} else { 
				queue[0] = queue[elementCount - 1];
				queue[elementCount-1] = null;
				elementCount--;
				heapifyDown(0);
			}
			
			return o;
		}
		
		public void heapifyDown(int index) {
			int leftIndex = leftIndex(index);
			int rightIndex = rightIndex(index);
			int currIndex = index;
			if(leftIndex < elementCount) {
				Object leftObj = queue[leftIndex];
				Comparable<T> key = (Comparable<T>)leftObj;
				if(key.compareTo((T)queue[currIndex]) >= 0) {
					queue[leftIndex] = queue[currIndex];
					queue[currIndex] = leftObj;
					heapifyDown(leftIndex);
				}
			}
			
			if(rightIndex < elementCount) {
				Object rightObj = queue[rightIndex];
				Comparable<T> key = (Comparable<T>)rightObj;
				if(key.compareTo((T)queue[currIndex]) >= 0) {
					queue[rightIndex] = queue[currIndex];
					queue[currIndex] = rightObj;
					heapifyDown(leftIndex);
				}
			}
		}
		
		public void print() {
			System.out.println(Arrays.toString(queue));
		}
		public Heap(int size, int capacityIncrement) {
			this.queue = new Object[size];
			this.capacityIncrement = capacityIncrement;
		}
		
		public void insert(Object o) {
			if(elementCount >= queue.length) {
				grow(elementCount + 1);
			}
			queue[elementCount++] = o;
			heapifyUp(elementCount-1);
		}
		
		private void heapifyUp(int index) {
			if(index <= 0){
				return;
			}
			int parentIndex = parentIndex(index);
			int currIndex = index;
			
			Object parentObj = queue[parentIndex];
			Object currObj = queue[currIndex];
			Comparable<T> key = (Comparable<T>) currObj;
			if(key.compareTo((T)parentObj) > 0) {
				queue[parentIndex] = currObj;
				queue[currIndex] = parentObj;
				heapifyUp(parentIndex);
			}
		}
		
		private int parentIndex(int i) {
			return ((int)Math.ceil((double)i/2)) - 1;
		}
		
		private int leftIndex(int i) {
			return 2 * i + 1;
		}
		
		private int rightIndex(int i) {
			return 2*i + 2;
		}
		
		private void grow(int minCapacity) {
			int oldCapacity = queue.length;
			int newCapacity = oldCapacity + ((capacityIncrement == 0) ?  oldCapacity : capacityIncrement);
			if(newCapacity - minCapacity <0 ) {
				newCapacity = minCapacity;
			}
			if(newCapacity - MAX_LEN > 0) {
				newCapacity = hugeCapacity(newCapacity);
			}
			
			queue = Arrays.copyOf(queue, newCapacity);
		}
		
		private int hugeCapacity(int minCapacity) {
			if(minCapacity < 0) {
				throw new OutOfMemoryError();
			}
			return (minCapacity > MAX_LEN) ? Integer.MAX_VALUE : MAX_LEN;
			
		}
	}
}

