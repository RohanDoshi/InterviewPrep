package pack;

import java.util.Arrays;
import java.util.Random;

public class SortingAlgos {
// index  [ 0  1  2  3  4  5  6  7  8]
// output [ 1  2  3  4  5  6  7  8  9]
// output [-3, 1, 2, 5, 6, 7, 8, 8, 9]
	public static void main(String[] args) {
		int a[] = {7,8,1,5,2,6,8,9,3};
//		MergeSort mergeSort = new MergeSort(a);
//		mergeSort.mergeSort();
//		QuickSort sort = new QuickSort(a);
//		sort.quickSort();
		KthSmallestElement element = new KthSmallestElement();
		element.kthSmall(a, 4);
		element.kthSmall(a, 8);
		element.kthSmall(a, 2);
		element.kthSmall(a, 6);
	}

}

class CountingSort {
	int a[] = null;
	int k = -1;
	public CountingSort(int a[], int k) {
		this.a = a;
		this.k = k;
	}
	
	public void countingSort() { 
		
		int count[] = new int[k];
		for(int i=0; i<a.length; i++) {
			count[a[i]] ++;
		}
		
		for(int i=1; i<count.length; i++) {
			count[i] = count[i] + count[i-1];
		}
		
		int b[] = new int[a.length];
		for(int i=a.length-1; i>=0 ; i--) {
			b[count[a[i]]] = a[i];
			count[a[i]]--;
		}
	}
}
class KthSmallestElement { 
	
	public void kthSmall(int a[], int kIndex) {
		int i = kthSmallest(a, 0, a.length -1);
		while( i != kIndex ) {
			if(kIndex  > i)
			i =	kthSmallest(a, i+1, a.length-1);
			else 
			i =	kthSmallest(a, 0, i-1);
		}
		System.out.println(a[kIndex]);
	}
	// 1 2 3 
	public int kthSmallest(int a[], int m, int n) {
			int r = new Random().nextInt(n-m+1) + m;
			int t = a[m];
			a[m] = a[r];
			a[r] = t;
			int j = m ;
			for(int i = m + 1; i <=n; i++) {
				if(a[i] <= a[m]) {
					int temp = a[i];
					a[i] = a[++j];
					a[j] = temp;
				}
			}
			
			if(j != m) {
				int temp = a[j];
				a[j] = a[m];
				a[m] = temp;
			}
			return j;
	}
}

class QuickSort { 
	int arr[] = null;
	public QuickSort(int a[]) {
		this.arr = a;
	}
	
	public void quickSort() {
		quickSort(0, arr.length-1);
		System.out.println(Arrays.toString(arr));
	}
	
	private void quickSort(int i, int j) {
		if(i < j) {
			int pivot = partition(i, j);
			quickSort(i, pivot-1);
			quickSort(pivot+1, j);
		}
		
	}
	//2 4 5 6 1 6 7
	private int partition(int a, int b) {
		int pI = a;
		int pivot = arr[pI];
		for(int i = a+1; i<=b; i++) {
			if(arr[i] < pivot) {
				swap(a,i);
				a++;
				pI = i;
			}
		}
		swap(a, pI);
		return a;
	}
	
	private void swap(int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}

class MergeSort { 
	int arr[] = null;
	public MergeSort(int[] arr) {
		this.arr = arr;
	}
	
	public void mergeSort() {
		mergeSort(0, arr.length-1);
		System.out.println(Arrays.toString(arr));
	}
	
	public void mergeSort(int a, int b) {
		if(a < b) {
			int mid = (a + b)/2;
			mergeSort(a,mid);
			mergeSort(mid+1, b);
			merge(a,mid, mid+1, b);
		}
		
		
	}
	
	private void merge(int a1, int b1, int a2, int b2) {
		int temp1[] = new int[b1-a1+1 + 1];
		for(int i=a1; i<=b1; i++) {
			temp1[i-a1] = arr[i];
		}
		temp1[temp1.length-1] = Integer.MAX_VALUE;
		int temp2[] = new int[b2-a2+1 + 1];
		for(int i=a2; i<=b2; i++) {
			temp2[i-a2] = arr[i]; 
		}
		temp2[temp2.length-1] = Integer.MAX_VALUE;
		int temp3[] = new int[b1-a1+1+b2-a2+1];
		int i=0, j=0;
		for(int k=0; k<temp3.length; k++) {
			if(temp1[i] <= temp2[j]) {
				temp3[k] = temp1[i++];
			} else { 
				temp3[k] = temp2[j++];
			}
		}
		
		for(i=a1; i<=b2; i++) {
			arr[i] = temp3[i-a1];
		}
		
	}
}
